"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4430],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var i=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,a=function(e,t){if(null==e)return{};var r,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=i.createContext({}),m=function(e){var t=i.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=m(r),g=a,d=h["".concat(s,".").concat(g)]||h[g]||c[g]||n;return r?i.createElement(d,o(o({ref:t},p),{},{components:r})):i.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,o=new Array(n);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<n;m++)o[m]=r[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4597:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>l,toc:()=>m});var i=r(7462),a=(r(7294),r(3905));const n={sidebar_position:1,displayed_sidebar:"algorithms"},o="Introduction to Algorithms",l={unversionedId:"algorithms/intro",id:"algorithms/intro",title:"Introduction to Algorithms",description:"The word Algorithm means \u201dA set of finite rules or instructions to be followed in calculations or other problem-solving operations\u201d Or \u201dA procedure for solving a mathematical problem in a finite number of steps that frequently involves recursive operations\u201d.",source:"@site/docs/algorithms/01-intro.md",sourceDirName:"algorithms",slug:"/algorithms/intro",permalink:"/blog/algorithms/intro",draft:!1,editUrl:"https://github.com/jhasuraj01/blog/tree/main/docs/algorithms/01-intro.md",tags:[],version:"current",lastUpdatedBy:"Suraj Jha",lastUpdatedAt:1671750421,formattedLastUpdatedAt:"Dec 22, 2022",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"algorithms"},sidebar:"algorithms",next:{title:"Kadane's Algorithm",permalink:"/blog/algorithms/kadanes-algorithm/"}},s={},m=[{value:"Types of Algorithms",id:"types-of-algorithms",level:2},{value:"Algorithm complexity",id:"algorithm-complexity",level:2}],p={toc:m};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction-to-algorithms"},"Introduction to Algorithms"),(0,a.kt)("p",null,"The word Algorithm means \u201dA set of finite rules or instructions to be followed in calculations or other problem-solving operations\u201d Or \u201dA procedure for solving a mathematical problem in a finite number of steps that frequently involves recursive operations\u201d."),(0,a.kt)("p",null,"There are many important algorithms that are commonly covered in technical interviews. Here is a list of some common algorithms that you might be expected to know:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Sorting algorithms"),": algorithms for sorting a list of items, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"bubble sort"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"insertion sort"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"merge sort"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"quick sort"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Search algorithms"),": algorithms for searching a list of items, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"linear search"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"binary search"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"ternary search"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Graph algorithms"),": algorithms for working with graphs, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"Depth-First Search (DFS)"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Breadth-First Search (BFS)"),", and shortest path algorithms (e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"Dijkstra's algorithm")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"A*"),")."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Tree algorithms"),": algorithms for working with trees, such as tree traversal algorithms and algorithms for maintaining binary search trees."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Dynamic programming"),": algorithms for solving problems by breaking them down into smaller subproblems and storing the results to avoid unnecessary recomputation."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Divide and conquer"),": algorithms for solving problems by dividing them into smaller subproblems and solving each subproblem separately."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Greedy algorithms"),": algorithms for making locally optimal choices at each step in order to try to achieve a global optimal solution."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"String matching algorithms"),": algorithms for finding patterns in strings, such as the ",(0,a.kt)("inlineCode",{parentName:"li"},"Knuth-Morris-Pratt (KMP)")," algorithm and the ",(0,a.kt)("inlineCode",{parentName:"li"},"Boyer-Moore algorithm"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Hashing algorithms"),": algorithms for mapping keys to indices in a hash table, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"linear probing")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"separate chaining"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"NP-hard problems"),": understanding of the concept of NP-hard problems and techniques for solving them, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"approximation algorithms")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"heuristics"),".")),(0,a.kt)("p",null,"It's also helpful to be familiar with various data structures, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"arrays"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"linked lists"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stacks"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"queues"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"heaps"),", and how to use them to implement algorithms efficiently."),(0,a.kt)("h2",{id:"types-of-algorithms"},"Types of Algorithms"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Brute Force Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Recursive Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Backtracking Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Searching Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Sorting Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Hashing Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Divide and Conquer Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Greedy Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Dynamic Programming Algorithm"),(0,a.kt)("li",{parentName:"ol"},"Randomized Algorithm")),(0,a.kt)("h2",{id:"algorithm-complexity"},"Algorithm complexity"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Space Complexity"),(0,a.kt)("li",{parentName:"ol"},"Time Complexity")))}h.isMDXComponent=!0}}]);