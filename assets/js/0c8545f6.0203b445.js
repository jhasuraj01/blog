"use strict";(self.webpackChunkjhasuraj_blog=self.webpackChunkjhasuraj_blog||[]).push([[5670],{3905:(t,e,r)=>{r.d(e,{Zo:()=>g,kt:()=>d});var n=r(7294);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var l=n.createContext({}),m=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},g=function(t){var e=m(t.components);return n.createElement(l.Provider,{value:e},t.children)},p="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(t,e){var r=t.components,i=t.mdxType,a=t.originalType,l=t.parentName,g=s(t,["components","mdxType","originalType","parentName"]),p=m(r),h=i,d=p["".concat(l,".").concat(h)]||p[h]||c[h]||a;return r?n.createElement(d,o(o({ref:e},g),{},{components:r})):n.createElement(d,o({ref:e},g))}));function d(t,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=r.length,o=new Array(a);o[0]=h;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:i,o[1]=s;for(var m=2;m<a;m++)o[m]=r[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},439:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var n=r(7462),i=(r(7294),r(3905));const a={title:"String Algorithms",displayed_sidebar:"algorithms",keywords:["Algorithms on String","String"]},o="Algorithms on String",s={unversionedId:"algorithms/string-algorithms",id:"algorithms/string-algorithms",title:"String Algorithms",description:"Here is a list of some common string algorithms:",source:"@site/docs/algorithms/04-string-algorithms.mdx",sourceDirName:"algorithms",slug:"/algorithms/string-algorithms",permalink:"/blog/algorithms/string-algorithms",draft:!1,editUrl:"https://github.com/jhasuraj01/blog/tree/main/docs/algorithms/04-string-algorithms.mdx",tags:[],version:"current",lastUpdatedBy:"jhasuraj01",lastUpdatedAt:1671798224,formattedLastUpdatedAt:"Dec 23, 2022",sidebarPosition:4,frontMatter:{title:"String Algorithms",displayed_sidebar:"algorithms",keywords:["Algorithms on String","String"]},sidebar:"algorithms",previous:{title:"Monotonic Stack",permalink:"/blog/algorithms/monotonic-stack/"}},l={},m=[],g={toc:m};function p(t){let{components:e,...r}=t;return(0,i.kt)("wrapper",(0,n.Z)({},g,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"algorithms-on-string"},"Algorithms on String"),(0,i.kt)("p",null,"Here is a list of some common string algorithms:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String searching algorithms"),": algorithms for finding a pattern in a string, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"Rabin-Karp Algorithm (Rolling Hash)"),", the ",(0,i.kt)("inlineCode",{parentName:"li"},"Knuth-Morris-Pratt (KMP)")," algorithm and the ",(0,i.kt)("inlineCode",{parentName:"li"},"Boyer-Moore algorithm"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String matching algorithms"),": algorithms for determining whether a string matches a given pattern, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"regular expression")," matching and ",(0,i.kt)("inlineCode",{parentName:"li"},"finite automata")," based matching."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String manipulation algorithms"),": algorithms for manipulating strings, such as string ",(0,i.kt)("em",{parentName:"li"},"concatenation"),", string ",(0,i.kt)("em",{parentName:"li"},"reversal"),", and string ",(0,i.kt)("inlineCode",{parentName:"li"},"permutation")," generation."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String compression algorithms"),": algorithms for compressing strings, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"Huffman coding")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"run-length encoding"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String sorting algorithms"),": algorithms for sorting strings, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"radix sort")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"multi-key quicksort"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String parsing algorithms"),": algorithms for extracting information from strings, such as regular expression parsing and parsing of structured data formats (e.g., CSV, JSON)."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String hashing algorithms"),": algorithms for computing hash values for strings, such as the SHA-2 and SHA-3 algorithms."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String transformation algorithms"),": algorithms for transforming strings, such as case conversion, character encoding and decoding, and transliteration."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String similarity algorithms"),": algorithms for measuring the similarity between two strings, such as the ",(0,i.kt)("inlineCode",{parentName:"li"},"Levenshtein distance")," and the ",(0,i.kt)("inlineCode",{parentName:"li"},"Jaccard coefficient"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"String correction algorithms"),": algorithms for correcting errors in strings, such as spelling correction and grammar correction.")),(0,i.kt)("h1",{id:"standard-problems"},"Standard Problems"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Exact Pattern Matching"),": Given a string ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," and string ",(0,i.kt)("inlineCode",{parentName:"li"},"pattern"),",\noutput all the position in ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," where ",(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," appears as a substring."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Approximate Pattern Matching"),": Given a string ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," and string ",(0,i.kt)("inlineCode",{parentName:"li"},"pattern"),",\noutput all the position in ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," where ",(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," appears as a substring ",(0,i.kt)("em",{parentName:"li"},"with at\nmost ",(0,i.kt)("inlineCode",{parentName:"em"},"d")," mismatches"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Multiple Pattern Matching"),":  Given a string ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," and a set of string ",(0,i.kt)("inlineCode",{parentName:"li"},"patterns"),",\noutput all the position in ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," where a string from ",(0,i.kt)("inlineCode",{parentName:"li"},"patterns")," appears as a substring.")))}p.isMDXComponent=!0}}]);