"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[717],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6231:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={title:"DFS traversal in Tree",displayed_sidebar:"dataStructures",keywords:["DFS","Depth first search","Tree","Data Structure","Algorithm"]},i="Depth first search in Tree",c={unversionedId:"data-structures/tree/dfs",id:"data-structures/tree/dfs",title:"DFS traversal in Tree",description:"Algorithm",source:"@site/docs/data-structures/tree/01-dfs.mdx",sourceDirName:"data-structures/tree",slug:"/data-structures/tree/dfs",permalink:"/blog/data-structures/tree/dfs",draft:!1,editUrl:"https://github.com/jhasuraj01/blog/tree/main/docs/data-structures/tree/01-dfs.mdx",tags:[],version:"current",lastUpdatedBy:"jhasuraj01",lastUpdatedAt:1671789410,formattedLastUpdatedAt:"Dec 23, 2022",sidebarPosition:1,frontMatter:{title:"DFS traversal in Tree",displayed_sidebar:"dataStructures",keywords:["DFS","Depth first search","Tree","Data Structure","Algorithm"]},sidebar:"dataStructures",previous:{title:"Tree",permalink:"/blog/data-structures/tree/"},next:{title:"Root Shifting",permalink:"/blog/data-structures/tree/root-shifting"}},s={},l=[{value:"Algorithm",id:"algorithm",level:2}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"depth-first-search-in-tree"},"Depth first search in Tree"),(0,a.kt)("h2",{id:"algorithm"},"Algorithm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='Tree: Adjacency List'",title:"'Tree:",Adjacency:!0,"List'":!0},"\nvoid dfs(int curr_node, int parent, vector<vector<int>> &tree) {\n\n    // loop all child of child_node\n    for(int child: tree[curr_node]) {\n\n        // don't visit back parent to avoid infinite loop\n        if(child == parent) continue;\n\n        /* pre processing */\n\n        // recusive call for each child\n        dfs(child, curr_node, tree);\n\n        /* post processing */\n\n    }\n\n}\n\n")))}d.isMDXComponent=!0}}]);