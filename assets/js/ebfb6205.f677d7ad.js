"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6845],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=i(r),m=o,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||a;return r?n.createElement(f,c(c({ref:t},u),{},{components:r})):n.createElement(f,c({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[l]="string"==typeof e?e:o,c[1]=p;for(var i=2;i<a;i++)c[i]=r[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5430:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>p,toc:()=>i});var n=r(7462),o=(r(7294),r(3905));const a={title:"Connected Components",displayed_sidebar:"dataStructures",keywords:["Connected Components","Graph"]},c="Connected Components in an Undirected Graph",p={unversionedId:"data-structures/graph/connected-components",id:"data-structures/graph/connected-components",title:"Connected Components",description:"Practice Problems",source:"@site/docs/data-structures/graph/01_connected-components.mdx",sourceDirName:"data-structures/graph",slug:"/data-structures/graph/connected-components",permalink:"/blog/data-structures/graph/connected-components",draft:!1,editUrl:"https://github.com/jhasuraj01/blog/tree/main/docs/data-structures/graph/01_connected-components.mdx",tags:[],version:"current",lastUpdatedBy:"jhasuraj01",lastUpdatedAt:1671614413,formattedLastUpdatedAt:"Dec 21, 2022",sidebarPosition:1,frontMatter:{title:"Connected Components",displayed_sidebar:"dataStructures",keywords:["Connected Components","Graph"]},sidebar:"dataStructures",previous:{title:"Graph Theory",permalink:"/blog/data-structures/graph/"},next:{title:"Bipartite Graph",permalink:"/blog/data-structures/graph/bipartite-graph/"}},s={},i=[{value:"Practice Problems",id:"practice-problems",level:2}],u={toc:i};function l(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connected-components-in-an-undirected-graph"},"Connected Components in an Undirected Graph"),(0,o.kt)("h2",{id:"practice-problems"},"Practice Problems"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/number-of-provinces/"},"547. Number of Provinces - LeetCode"))))}l.isMDXComponent=!0}}]);